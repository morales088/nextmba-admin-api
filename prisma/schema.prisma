// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int       @id @default(autoincrement())
  name         String?
  email        String    @unique
  password     String
  profileImage String?
  role         Int
  status       Int       @default(1)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model ResetPasswordToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  token     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Courses {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  description     String?
  cover_photo     String?
  course_link     String?
  price           Decimal           @db.Decimal(9, 2)
  telegram_link   String?
  paid            Int               @default(1)
  is_displayed    Int               @default(1)
  status          Int               @default(1)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  Modules         Modules[]
  Student_courses Student_courses[]
  Product_items   Product_items[]
}

model Modules {
  id            Int            @id @default(autoincrement())
  course        Courses        @relation(fields: [course_id], references: [id])
  course_id     Int
  name          String         @db.VarChar(255)
  description   String?
  zoom_link     String?
  external_link String?
  start_date    DateTime
  end_date      DateTime
  status        Int            @default(1)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  Translations  Translations[]
  Topics        Topics[]
  Medias        Medias[]
}

model Speakers {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  position    String?
  company     String?
  description String?
  profile     String?

  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Topics    Topics[]
}

model Translations {
  id            Int     @id @default(autoincrement())
  language_code String  @db.VarChar(255)
  module        Modules @relation(fields: [module_id], references: [id])
  module_id     Int
  name          String  @db.VarChar(255)
  description   String?

  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Topics {
  id Int @id @default(autoincrement())

  module     Modules  @relation(fields: [module_id], references: [id])
  module_id  Int
  speaker    Speakers @relation(fields: [speaker_id], references: [id])
  speaker_id Int

  name        String  @db.VarChar(255)
  description String?
  cover_photo String?
  type        Int     @default(1) //[1 - main lecture, 2 - assignment]
  position    Int     @default(1)
  publish     Int     @default(0) //publish to library when replay is available

  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Files     Files[]
  Medias    Medias[]
}

model Files {
  id Int @id @default(autoincrement())

  topic    Topics @relation(fields: [topic_id], references: [id])
  topic_id Int

  name      String  @db.VarChar(255)
  type      Int     @default(1) // [1 - materials, 2 - assignment]
  file_link String?

  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Medias {
  id Int @id @default(autoincrement())

  module    Modules @relation(fields: [module_id], references: [id])
  module_id Int
  topic     Topics  @relation(fields: [topic_id], references: [id])
  topic_id  Int

  language_code String @db.VarChar(255)
  media_type    Int    @default(1) // 1 - livestream, 2 - replay
  source        Int    @default(1) // [1 - yt, 2 - cf, 3 - vimeo, 4 - zoom]
  source_code   String @db.VarChar(255)

  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Students {
  id Int @id @default(autoincrement())

  name                 String    @db.VarChar(255)
  email                String    @db.VarChar(255)
  password             String    @db.VarChar(255)
  phone                String
  country              String
  company              String
  position             String
  language             String    @default("en") // en - english, es - espanish
  last_login           DateTime?
  profile_picture      String?
  chat_moderator       Boolean   @default(false) //[false - not, true - moderator]
  forgot_password_code String
  account_type         Int       @default(1) //[1 - trial, 2 - regular, 3 - pro]
  affiliate_access     Int       @default(0) //[0 - not, 1 - partner]

  status          Int               @default(1)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  Student_links   Student_links[]
  Student_courses Student_courses[]
}

model Student_links {
  id Int @id @default(autoincrement())

  student   Students @relation(fields: [studentId], references: [id])
  studentId Int

  name String @db.VarChar(255)
  link String
  icon String

  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Student_courses {
  id Int @id @default(autoincrement())

  student   Students @relation(fields: [studentId], references: [id])
  studentId Int
  course    Courses  @relation(fields: [courseId], references: [id])
  courseId  Int

  course_type     Int      @default(1) //[1 - paid, 2 - manually added, 3 - gifted]
  starting_date   DateTime @default(now())
  expiration_date DateTime @default(dbgenerated("NOW() + interval '1 year'"))

  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Products {
  id Int @id @default(autoincrement())

  name           String  @db.VarChar(255)
  code           String  @db.VarChar(255)
  price          Decimal @db.Decimal(9, 2)
  pro_access     Boolean @default(false)
  library_access Boolean @default(false)

  status        Int             @default(1)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  Product_items Product_items[]
}

model Product_items {
  id Int @id @default(autoincrement())

  product    Products @relation(fields: [product_id], references: [id])
  product_id Int
  course     Courses  @relation(fields: [course_id], references: [id])
  course_id  Int

  quantity Int @default(1)

  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
