// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 Int                  @id @default(autoincrement())
  name               String?
  email              String               @unique
  password           String
  profileImage       String?
  role               Int
  status             Int                  @default(1)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt
  affiliates         Affiliates[]
  affilate_withdraws Affilate_withdraws[]
}

model ResetPasswordToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  token     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Courses {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  description     String?
  cover_photo     String?
  course_link     String?
  price           Decimal           @db.Decimal(9, 2)
  telegram_link   String?
  paid            Int               @default(1)
  is_displayed    Int               @default(1)
  status          Int               @default(1)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  modules         Modules[]
  student_courses Student_courses[]
  product_items   Product_items[]
  payment_items   Payment_items[]
  gifts           Gifts[]
}

model Modules {
  id              Int            @id @default(autoincrement())
  course          Courses        @relation(fields: [course_id], references: [id])
  course_id       Int
  name            String         @db.VarChar(255)
  description     String?
  zoom_link       String?
  external_link   String?
  start_date      DateTime
  end_date        DateTime
  display_topic   Boolean        @default(false)
  display_speaker Boolean        @default(false)
  status          Int            @default(1)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt
  translations    Translations[]
  topics          Topics[]
  medias          Medias[]
  files           Files[]
}

model Speakers {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  position    String?
  company     String?
  description String?
  profile     String?
  status      Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  topics      Topics[]
}

model Translations {
  id            Int       @id @default(autoincrement())
  language_code String    @db.VarChar(255)
  module        Modules   @relation(fields: [module_id], references: [id])
  module_id     Int
  name          String    @db.VarChar(255)
  description   String?
  status        Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model Topics {
  id         Int      @id @default(autoincrement())
  module     Modules  @relation(fields: [module_id], references: [id])
  module_id  Int
  speaker    Speakers @relation(fields: [speaker_id], references: [id])
  speaker_id Int

  name        String    @db.VarChar(255)
  description String?
  cover_photo String?
  start_time  DateTime?
  end_time    DateTime?
  type        Int       @default(1) //[1 - main lecture, 2 - assignment]
  position    Int       @default(1)
  publish     Int       @default(0) //publish to library when replay is available

  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  files     Files[]
  medias    Medias[]
}

model Files {
  id        Int       @id @default(autoincrement())
  module    Modules   @relation(fields: [module_id], references: [id])
  module_id Int
  topic     Topics    @relation(fields: [topic_id], references: [id])
  topic_id  Int
  name      String    @db.VarChar(255)
  type      Int       @default(1) // [1 - materials, 2 - assignment]
  file_link String?
  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Medias {
  id            Int       @id @default(autoincrement())
  module        Modules   @relation(fields: [module_id], references: [id])
  module_id     Int
  topic         Topics    @relation(fields: [topic_id], references: [id])
  topic_id      Int
  language_code String    @db.VarChar(255)
  media_type    Int       @default(1) // 1 - livestream, 2 - replay
  source        Int       @default(1) // [1 - yt, 2 - cf, 3 - vimeo, 4 - zoom]
  source_code   String    @db.VarChar(255)
  status        Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model Students {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  email              String               @unique @db.VarChar(255)
  password           String               @db.VarChar(255)
  phone              String?
  country            String?
  industry           String?
  company            String?
  position           String?
  language           String               @default("en") // en - english, es - espanish
  last_login         DateTime?
  profile_picture    String?
  // chat_moderator       Boolean   @default(false) //[false - not, true - moderator]
  // forgot_password_code String
  library_access     Int                  @default(0)
  account_type       Int                  @default(1) //[1 - basic, 2 - pro]
  affiliate_access   Int                  @default(0) //[0 - not, 1 - partner]
  website            String?
  linkedIn           String?
  instagram          String?
  telegram           String?
  status             Int                  @default(1)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt
  student_courses    Student_courses[]
  payments           Payments[]
  affiliates         Affiliates[]
  affilate_withdraws Affilate_withdraws[]
  gifts              Gifts[]
}

model Student_courses {
  id              Int       @id @default(autoincrement())
  student         Students  @relation(fields: [student_id], references: [id])
  student_id      Int
  course          Courses   @relation(fields: [course_id], references: [id])
  course_id       Int
  course_type     Int       @default(1) //[1 - paid, 2 - manually added, 3 - gifted]
  module_quantity Int       @default(12)
  starting_date   DateTime  @default(now())
  expiration_date DateTime  @default(dbgenerated("NOW() + interval '1 year'"))
  status          Int       @default(1)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}

model Products {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  code           String          @db.VarChar(255)
  price          Decimal         @db.Decimal(9, 2)
  pro_access     Boolean         @default(false)
  library_access Boolean         @default(false)
  status         Int             @default(1)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  product_items  Product_items[]
  payments       Payments[]
}

model Product_items {
  id         Int       @id @default(autoincrement())
  product    Products  @relation(fields: [product_id], references: [id])
  product_id Int
  course     Courses   @relation(fields: [course_id], references: [id])
  course_id  Int
  quantity   Int       @default(1)
  status     Int       @default(1)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Payments {
  id                    Int                   @id @default(autoincrement())
  student               Students              @relation(fields: [student_id], references: [id])
  student_id            Int
  product               Products              @relation(fields: [product_id], references: [id])
  product_id            Int
  product_code          String                @db.VarChar(255)
  reference_id          String?
  price                 Decimal               @db.Decimal(9, 2)
  payment_method        Int                   @default(1) //1 - paid, 2 - manual
  name                  String                @db.VarChar(255)
  email                 String                @db.VarChar(255)
  contact_number        String?
  country               String?
  created_by            Int?                  @default(0)
  utm_source            String?
  utm_medium            String?
  utm_campaign          String?
  utm_content           String?
  from_student_id       Int?                  @default(0)
  affiliate_code        String?
  commission_percentage Decimal               @default(0) @db.Decimal(9, 2)
  commission_status     Int                   @default(0) //[0 - unpaid, 1 - paid]
  remarks               String?
  status                Int                   @default(1)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime?             @updatedAt
  payment_items         Payment_items[]
  withdrawal_payments   Withdrawal_payments[]
  gifts                 Gifts[]
}

model Payment_items {
  id         Int       @id @default(autoincrement())
  payment    Payments  @relation(fields: [payment_id], references: [id])
  payment_id Int
  course     Courses   @relation(fields: [course_id], references: [id])
  course_id  Int
  quantity   Int       @default(1)
  giftable   Int       @default(0)
  status     Int       @default(1)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Affiliates {
  id              Int       @id @default(autoincrement())
  student         Students  @relation(fields: [student_id], references: [id])
  student_id      Int
  admin           Users?    @relation(fields: [admin_id], references: [id])
  admin_id        Int?
  code            String
  percentage      Decimal   @default(0) @db.Decimal(9, 2)
  withdrawal_info String?
  remarks         String?
  status          Int       @default(2) //[0 - cancel, 1 - proccessed, 2 - pending]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}

model Affilate_withdraws {
  id                  Int                   @id @default(autoincrement())
  student             Students              @relation(fields: [student_id], references: [id])
  student_id          Int
  admin               Users?                @relation(fields: [admin_id], references: [id])
  admin_id            Int?
  withdraw_amount     Decimal               @default(0) @db.Decimal(9, 2)
  withdrawal_info     String?
  remarks             String?
  status              Int                   @default(1) //[0 - decline, 1 - pending, 2 - approved]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @updatedAt
  withdrawal_payments Withdrawal_payments[]
}

model Withdrawal_payments {
  id                 Int                @id @default(autoincrement())
  affilate_withdraws Affilate_withdraws @relation(fields: [withdrawal_id], references: [id])
  withdrawal_id      Int
  payment            Payments           @relation(fields: [payment_id], references: [id])
  payment_id         Int
  status             Int                @default(1) //[0 - decline, 1 - pending, 2 - approved]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime?          @updatedAt
}

model Gifts {
  id              Int       @id @default(autoincrement())
  students        Students  @relation(fields: [from_student_id], references: [id])
  from_student_id Int
  payment         Payments  @relation(fields: [payment_id], references: [id])
  payment_id      Int
  course          Courses   @relation(fields: [course_id], references: [id])
  course_id       Int
  recipient       String
  status          Int       @default(1) // 	[0 - deleted, 1 - active]	
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}
