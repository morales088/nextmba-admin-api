generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 Int                  @id @default(autoincrement())
  name               String?
  email              String               @unique
  password           String
  profileImage       String?
  role               Int
  status             Int                  @default(1)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt
  affilate_withdraws Affilate_withdraws[]
  affiliates         Affiliates[]
}

model ResetPasswordToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  token     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Courses {
  id                          Int               @id @default(autoincrement())
  name                        String            @db.VarChar(255)
  description                 String?
  cover_photo                 String?
  course_link                 String?
  applied_studies_description String?
  starting_date               DateTime?         @default(now())
  price                       Decimal           @db.Decimal(9, 2)
  telegram_link               String?
  paid                        Int               @default(1)
  is_displayed                Int               @default(1)
  status                      Int               @default(1)
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime?         @updatedAt
  gifts                       Gifts[]
  modules                     Modules[]
  payment_items               Payment_items[]
  product_items               Product_items[]
  student_courses             Student_courses[]
}

model Modules {
  id                  Int            @id @default(autoincrement())
  course_id           Int
  name                String         @db.VarChar(255)
  description         String?
  live_link           String?
  external_link       String?
  host_email          String?
  start_date          DateTime
  end_date            DateTime
  display_topic       Boolean        @default(false)
  display_speaker     Boolean        @default(false)
  status              Int            @default(1)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime?      @updatedAt
  live_id             String?
  custom_course_title String?
  files               Files[]
  medias              Medias[]
  course              Courses        @relation(fields: [course_id], references: [id])
  topics              Topics[]
  translations        Translations[]
}

model Speakers {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  position    String?
  company     String?
  description String?
  profile     String?
  status      Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  email       String?   @default("")
  language    String    @default("en")
  password    String?   @default("")
  topics      Topics[]
}

model Translations {
  id            Int       @id @default(autoincrement())
  language_code String    @db.VarChar(255)
  module_id     Int
  name          String    @db.VarChar(255)
  description   String?
  status        Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  module        Modules   @relation(fields: [module_id], references: [id])
}

model Topics {
  id               Int       @id @default(autoincrement())
  module_id        Int
  speaker_id       Int
  name             String    @db.VarChar(255)
  description      String?
  cover_photo      String?
  start_time       DateTime?
  end_time         DateTime?
  type             Int       @default(1)
  position         Int       @default(1)
  library_position Int       @default(0)
  publish          Int       @default(0)
  status           Int       @default(1)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  hide_recordings  Boolean   @default(false)
  featured_lecture Boolean   @default(false)
  files            Files[]
  medias           Medias[]
  module           Modules   @relation(fields: [module_id], references: [id])
  speaker          Speakers  @relation(fields: [speaker_id], references: [id])
}

model Files {
  id        Int       @id @default(autoincrement())
  module_id Int
  topic_id  Int
  name      String    @db.VarChar(255)
  type      Int       @default(1)
  file_link String?
  status    Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  module    Modules   @relation(fields: [module_id], references: [id])
  topic     Topics    @relation(fields: [topic_id], references: [id])
}

model Medias {
  id            Int       @id @default(autoincrement())
  module_id     Int
  topic_id      Int
  language_code String    @db.VarChar(255)
  media_type    Int       @default(1)
  source        Int       @default(1)
  source_code   String    @db.VarChar(255)
  status        Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  module        Modules   @relation(fields: [module_id], references: [id])
  topic         Topics    @relation(fields: [topic_id], references: [id])
}

model Students {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  email              String               @unique @db.VarChar(255)
  password           String               @db.VarChar(255)
  phone              String?
  country            String?
  industry           String?
  company            String?
  position           String?
  language           String               @default("en")
  last_login         DateTime?
  profile_picture    String?
  chat_moderator     Boolean              @default(false)
  chat_access        Boolean              @default(true)
  library_access     Int                  @default(0)
  account_type       Int                  @default(1)
  affiliate_access   Int                  @default(0)
  website            String?
  linkedIn           String?
  instagram          String?
  telegram           String?
  status             Int                  @default(1)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime?            @updatedAt
  created_by         Int?                 @default(0)
  email_sent         Boolean              @default(false)
  affilate_withdraws Affilate_withdraws[]
  affiliates         Affiliates[]
  gifts              Gifts[]
  payments           Payments[]
  student_courses    Student_courses[]
}

model Student_courses {
  id              Int       @id @default(autoincrement())
  student_id      Int
  course_id       Int
  course_type     Int       @default(1)
  module_quantity Int       @default(12)
  starting_date   DateTime  @default(now())
  expiration_date DateTime  @default(dbgenerated("(now() + '1 year'::interval)"))
  status          Int       @default(1)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  course          Courses   @relation(fields: [course_id], references: [id])
  student         Students  @relation(fields: [student_id], references: [id])
}

model Products {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  code           String          @db.VarChar(255)
  price          Decimal         @db.Decimal(9, 2)
  pro_access     Boolean         @default(false)
  library_access Boolean         @default(false)
  status         Int             @default(1)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  payments       Payments[]
  product_items  Product_items[]
}

model Product_items {
  id         Int       @id @default(autoincrement())
  product_id Int
  course_id  Int
  quantity   Int       @default(1)
  status     Int       @default(1)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  course     Courses   @relation(fields: [course_id], references: [id])
  product    Products  @relation(fields: [product_id], references: [id])
}

model Payments {
  id                    Int                   @id @default(autoincrement())
  student_id            Int
  product_id            Int?                  @default(0)
  product_code          String?               @db.VarChar(255)
  reference_id          String?
  price                 Decimal               @db.Decimal(9, 2)
  payment_method        Int                   @default(1)
  name                  String                @db.VarChar(255)
  email                 String                @db.VarChar(255)
  contact_number        String?
  country               String?
  created_by            Int?                  @default(0)
  utm_source            String?
  utm_medium            String?
  utm_campaign          String?
  utm_content           String?
  from_student_id       Int?                  @default(0)
  affiliate_code        String?
  commission_percentage Decimal               @default(0) @db.Decimal(9, 2)
  commission_status     Int                   @default(0)
  remarks               String?
  status                Int                   @default(1)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime?             @updatedAt
  gifts                 Gifts[]
  payment_items         Payment_items[]
  product               Products?             @relation(fields: [product_id], references: [id])
  student               Students              @relation(fields: [student_id], references: [id])
  withdrawal_payments   Withdrawal_payments[]
}

model Payment_items {
  id         Int       @id @default(autoincrement())
  payment_id Int
  course_id  Int
  quantity   Int       @default(1)
  giftable   Int       @default(0)
  status     Int       @default(1)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  course     Courses   @relation(fields: [course_id], references: [id])
  payment    Payments  @relation(fields: [payment_id], references: [id])
}

model Affiliates {
  id              Int       @id @default(autoincrement())
  student_id      Int
  admin_id        Int?
  code            String
  percentage      Decimal   @default(0) @db.Decimal(9, 2)
  withdrawal_info String?
  remarks         String?
  status          Int       @default(2)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  admin           Users?    @relation(fields: [admin_id], references: [id])
  student         Students  @relation(fields: [student_id], references: [id])
}

model Affilate_withdraws {
  id                  Int                   @id @default(autoincrement())
  student_id          Int
  admin_id            Int?
  withdraw_amount     Decimal               @default(0) @db.Decimal(9, 2)
  withdrawal_info     String?
  remarks             String?
  status              Int                   @default(1)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @updatedAt
  admin               Users?                @relation(fields: [admin_id], references: [id])
  student             Students              @relation(fields: [student_id], references: [id])
  withdrawal_payments Withdrawal_payments[]
}

model Withdrawal_payments {
  id                 Int                @id @default(autoincrement())
  withdrawal_id      Int
  payment_id         Int
  status             Int                @default(1)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime?          @updatedAt
  payment            Payments           @relation(fields: [payment_id], references: [id])
  affilate_withdraws Affilate_withdraws @relation(fields: [withdrawal_id], references: [id])
}

model Gifts {
  id              Int       @id @default(autoincrement())
  from_student_id Int
  payment_id      Int
  course_id       Int
  recipient       String
  status          Int       @default(1)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  course          Courses   @relation(fields: [course_id], references: [id])
  students        Students  @relation(fields: [from_student_id], references: [id])
  payment         Payments  @relation(fields: [payment_id], references: [id])
}
